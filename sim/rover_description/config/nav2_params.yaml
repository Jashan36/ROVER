# ============================================================
# BEHAVIOR TREE NAVIGATOR
# ============================================================
bt_navigator:
  ros__parameters:
    use_sim_time: True
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /odom
    bt_loop_duration: 10
    default_server_timeout: 20

    # Behavior tree plugins
    plugin_lib_names:
      - nav2_compute_path_to_pose_action_bt_node
      - nav2_follow_path_action_bt_node
      - nav2_back_up_action_bt_node
      - nav2_spin_action_bt_node
      - nav2_wait_action_bt_node
      - nav2_clear_costmap_service_bt_node
      - nav2_is_stuck_condition_bt_node
      - nav2_goal_reached_condition_bt_node

# ============================================================
# CONTROLLER SERVER (Local Planner)
# ============================================================
controller_server:
  ros__parameters:
    use_sim_time: True
    controller_frequency: 20.0 # 20 Hz control loop
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001

    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["goal_checker"]
    controller_plugins: ["FollowPath"] 

    # Progress Checker (detects stuck robot)
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5 # Must move 0.5m in time window
      movement_time_allowance: 10.0 # 10 seconds

    # Goal Checker (when is goal reached?)
    goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.25   # 25 cm position tolerance
      yaw_goal_tolerance: 0.25   # ~14° orientation tolerance
      stateful: True

    # DWB (Dynamic Window Approach) Controller
    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"
      debug_trajectory_details: False

      # Velocity Limits (Mars rovers are SLOW)
      min_vel_x: 0.0  
      min_vel_y: 0.0  
      max_vel_x: 0.5   # 0.5 m/s max (1.8 km/h)
      max_vel_y: 0.0  
      max_vel_theta: 1.0   # 1 rad/s max rotation
      min_speed_xy: 0.0  
      max_speed_xy: 0.5  
      min_speed_theta: 0.0  

      # Acceleration Limits
      acc_lim_x: 0.3   # 0.3 m/s² (conservative)
      acc_lim_y: 0.0  
      acc_lim_theta: 1.0  
      decel_lim_x: -0.3  
      decel_lim_y: 0.0  
      decel_lim_theta: -1.0  

      # Trajectory Sampling
      vx_samples: 20   # Sample 20 forward velocities
      vy_samples: 0   # No lateral motion
      vtheta_samples: 40   # Sample 40 rotation velocities

      # Simulation Parameters
      sim_time: 2.0   # Look ahead 2 seconds
      linear_granularity: 0.05  
      angular_granularity: 0.025  
      transform_tolerance: 0.2  

      # Goal Tolerances
      xy_goal_tolerance: 0.25
      trans_stopped_velocity: 0.25

      # Optimization
      short_circuit_trajectory_evaluation: True
      stateful: True

      # Trajectory Critics (scoring functions)
      critics:
        - "RotateToGoal"    # Align to goal orientation
        - "Oscillation"    # Penalize back-and-forth
        - "BaseObstacle"    # Avoid obstacles
        - "GoalAlign"    # Align path to goal
        - "PathAlign"    # Follow global path
        - "PathDist"    # Stay close to path
        - "GoalDist"    # Progress toward goal

      # Critic Weights
      BaseObstacle:
        scale: 0.02
      PathAlign:
        scale: 32.0
        forward_point_distance: 0.1
      GoalAlign:
        scale: 24.0
        forward_point_distance: 0.1
      PathDist:
        scale: 32.0
      GoalDist:
        scale: 24.0
      RotateToGoal:
        scale: 32.0
        slowing_factor: 5.0
        lookahead_time: -1.0

# ================================================================
# LOCAL COSTMAP (Obstacle Avoidance)
# ================================================================
local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0    # 5 Hz updates
      publish_frequency: 2.0    # 2 Hz visualization
      global_frame: odom
      robot_base_frame: base_link
      use_sim_time: True
      rolling_window: true    # Moves with robot

      # Size
      width: 10    # 10 meter window
      height: 10
      resolution: 0.05    # 5 cm cells

      robot_radius: 0.4    # 40 cm safety radius

      plugins: ["obstacle_layer", "inflation_layer"]

      # Obstacle Layer (from lidar)
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True    # Can clear obstacles
          marking: True    # Can mark obstacles
          data_type: "LaserScan"

      # Inflation Layer (safety buffer around obstacles)
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.8    # 80 cm safety margin

# ================================================================
# GLOBAL COSTMAP (Path Planning)
# ================================================================
global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0    # 1 Hz updates (slower)
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_link
      use_sim_time: True

      robot_radius: 0.4
      resolution: 0.1    # 10 cm cells (coarser)
      track_unknown_space: true   # Plan through unexplored areas

      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]

      # Static Layer (from map)
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True

      # Obstacle Layer
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"

      # Inflation Layer
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.8

# ============================================
# PLANNER SERVER (Global Path Planning)
# ============================================
planner_server:
  ros__parameters:
    expected_planner_frequency: 20.0
    use_sim_time: True
    planner_plugins: ["GridBased"]

    GridBased:
      plugin: "nav2_navfn_planner/NavfnPlanner"
      tolerance: 0.5  # Goal tolerance
      use_astar: false  # Use Dijkstra (more conservative)
      allow_unknown: true  # Plan through unexplored space

# ============================================
# SMOOTHER SERVER (Path Smoothing)
# ============================================
smoother_server:
  ros__parameters:
    use_sim_time: True
    smoother_plugins: ["simple_smoother"]
    
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      max_its: 1000
      do_refinement: True

# ================================================================
# BEHAVIOR SERVER (Recovery Behaviors)
# ================================================================
behavior_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    behavior_plugins: ["spin", "backup", "wait"]
    
    spin:
      plugin: "nav2_behaviors/Spin"
    backup:
      plugin: "nav2_behaviors/BackUp"
    wait:
      plugin: "nav2_behaviors/Wait"
      
    global_frame: odom
    robot_base_frame: base_link
    transform_tolerance: 0.1
    use_sim_time: true
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2

# ================================================================
# WAYPOINT FOLLOWER (Multi-Goal Navigation)
# ================================================================
waypoint_follower:
  ros__parameters:
    loop_rate: 20
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"

    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200 # Wait 200ms at each waypoint

# ================================================================
# VELOCITY SMOOTHER (Jerk Limiting)
# ================================================================
velocity_smoother:
  ros__parameters:
    use_sim_time: True
    smoothing_frequency: 20.0
    scale_velocities: False
    feedback: "OPEN_LOOP"

    max_velocity: [0.5, 0.0, 1.0]    # {vx, vy, ω}
    min_velocity: [-0.5, 0.0, -1.0]
    max_accel: [0.3, 0.0, 1.0]
    max_decel: [-0.3, 0.0, -1.0]

    odom_topic: "odom"
    odom_duration: 0.1
    deadband_velocity: [0.0, 0.0, 0.0]
    velocity_timeout: 1.0